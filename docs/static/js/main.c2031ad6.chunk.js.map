{"version":3,"sources":["ElectionsPage.js","ResultsPage.js","AddElectionPage.js","VotePage.js","App.js","serviceWorker.js","index.js"],"names":["rp","require","ElectList","props","console","log","JSON","stringify","listItems","elections","map","elem","react_default","a","createElement","key","id","Link","to","concat","name","ElectionsPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","undefined","needFetchData","authData","updateData","_this2","setState","options","uri","headers","User-Agent","auth","getSignInUserSession","accessToken","jwtToken","json","then","catch","err","ElectionsPage_ElectList","React","Component","Plot","charLen","Math","max","apply","toConsumableArray","e","length","style","height","bar","keys","indexBy","layout","margin","top","right","bottom","left","padding","colors","colorBy","borderColor","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","ResultsPage","match","params","results","sort","b","votes","ResultsPage_Plot","AddElectionPage","fields","updateField","bind","assertThisInitialized","method","body","candidates","push","i","splice","target","value","_this3","fieldsComps","f","ListItem_default","divider","TextField_default","label","onChange","IconButton_default","onClick","removeField","aria-label","Delete_default","changeName","List_default","component","Divider_default","addField","color","Add_default","Button_default","addElection","VotePage","Amplify","configure","Auth","region","userPoolId","userPoolWebClientId","authenticationFlowType","App","BrowserRouter","App_Header","Route","exact","path","Home","ElectionsNav","AddElectionAuth","VoteNav","code","dist","src_AddElectionPage","ElectionsAuth","src_ElectionsPage","ResultsAuth","src_ResultsPage","render","p","src_VotePage","App_ElectionsAuth","App_ResultsAuth","Header","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAEMA,EAAKC,EAAQ,KAEbC,EAAY,SAACC,GACfC,QAAQC,IAAIC,KAAKC,UAAUJ,IAC3B,IAAMK,EAAYL,EAAMM,UAAUC,IAAI,SAACC,GAAD,OAClCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKK,IAAIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAE,aAAAC,OAAeR,EAAKK,KAAOL,EAAKS,SAE9D,OAAOR,EAAAC,EAAAC,cAAA,UACHN,IAiDOa,cA5CX,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtB,KACD0B,MAAQ,CAACC,UAAKC,EAAUC,eAAc,GAF1BV,oFAQdG,KAAKtB,MAAM8B,UAAYR,KAAKI,MAAMG,eAAeP,KAAKS,kDAE9C,IAAAC,EAAAV,KACXA,KAAKW,SAAS,CAACJ,eAAc,IAC7B5B,QAAQC,IAAI,eAEZ,IAAIgC,EAAU,CACZC,IAAK,yEACLC,QAAS,CACLC,aAAc,kBACdC,KAAOhB,KAAKtB,MAAM8B,SAASS,uBAAuBC,YAAYC,UAElEC,MAAM,GAER7C,EAAGqC,GACFS,KAAK,SAAAhB,GACJK,EAAKC,SAAS,CAACN,KAAKA,IACpB1B,QAAQC,IAAI,aACX0C,MAAM,SAAAC,GACP5C,QAAQC,IAAI2C,sCAQd,OAAOpC,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACCW,KAAKI,MAAMC,MAAQlB,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAACmC,EAAcxB,KAAKI,MAAMC,MAAhC,cAvCAoB,IAAMC,6BCX5BnD,EAAKC,EAAQ,KAGbmD,EAAO,SAACjD,GACV,IAAIkD,EAAUC,KAAKC,IAALC,MAAAF,KAAI/B,OAAAkC,EAAA,EAAAlC,CAAQpB,EAAM2B,KAAKpB,IAAI,SAAAgD,GAAC,OAAIA,EAAEtC,KAAKuC,WACrD,OAAO/C,EAAAC,EAAAC,cAAA,OAAK8C,MAAO,CAACC,OAA2B,IAApB1D,EAAM2B,KAAK6B,SAAe/C,EAAAC,EAAAC,cAACgD,EAAA,cAAD,CACjDhC,KAAM3B,EAAM2B,KACZiC,KAAM,CAAC,SACPC,QAAQ,OACRC,OAAO,aACPC,OAAQ,CACJC,IAAO,GACPC,MAAS,IACTC,OAAU,GACVC,KAAQ,GAAGjB,GAEfkB,QAAS,GACTC,OAAO,QACPC,QAAQ,KACRC,YAAY,sBACZC,WAAY,CACRC,SAAY,EACZC,YAAe,EACfC,aAAgB,EAChBC,OAAU,QACVC,eAAkB,SAClBC,aAAgB,IAEpBC,eAAgB,GAChBC,gBAAiB,GACjBC,eAAe,sBACfC,SAAS,EACTC,gBAAiB,GACjBC,cAAe,OAoDRC,cA/CX,SAAAA,EAAYrF,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACjBlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAMtB,KACD0B,MAAQ,CAACC,UAAKC,EAAUC,eAAc,GACxCV,EAAKnB,MAAM8B,UAAUX,EAAKY,aAC7B9B,QAAQC,IAAIC,KAAKC,UAAUJ,IAJVmB,oFASdG,KAAKtB,MAAM8B,UAAYR,KAAKI,MAAMG,eAAeP,KAAKS,kDAE9C,IAAAC,EAAAV,KACXA,KAAKW,SAAS,CAACJ,eAAc,IAC7B5B,QAAQC,IAAI,eAEZ,IAAIgC,EAAU,CACZC,IAAG,gEAAAnB,OAAkEM,KAAKtB,MAAMsF,MAAMC,OAAO1E,GAA1F,YACHuB,QAAS,CACLC,aAAc,kBACdC,KAAOhB,KAAKtB,MAAM8B,SAASS,uBAAuBC,YAAYC,UAElEC,MAAM,GAER7C,EAAGqC,GACFS,KAAK,SAAAhB,GACJA,EAAK6D,QAAQC,KAAK,SAAC/E,EAAEgF,GAAH,OAAShF,EAAEiF,MAAQD,EAAEC,QACvC3D,EAAKC,SAAS,CAACN,KAAKA,IACpB1B,QAAQC,IAAI,aACX0C,MAAM,SAAAC,GACP5C,QAAQC,IAAI2C,sCAQd,OAAOpC,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,8BAAsBW,KAAKtB,MAAMsF,MAAMC,OAAO1E,IAC9CJ,EAAAC,EAAAC,cAAA,WACCW,KAAKI,MAAMC,MAAQlB,EAAAC,EAAAC,cAAA,WAAMR,KAAKC,UAAUkB,KAAKI,MAAMC,MAAMlB,EAAAC,EAAAC,cAACiF,EAAD,CAAMjE,KAAML,KAAKI,MAAMC,KAAK6D,QAAS5B,KAAMtC,KAAKI,MAAMC,KAAK6D,QAAQjF,IAAI,SAAAgD,GAAC,OAAIA,EAAEtC,mBA1CtH8B,IAAMC,gIC5B1BnD,EAAKC,EAAQ,KAgGJ+F,cAnFX,SAAAA,EAAY7F,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuE,IACjB1E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyE,GAAApE,KAAAH,KAAMtB,KACD0B,MAAQ,CAACT,KAAK,GAAG6E,OAAO,CAAC,SAE9B3E,EAAK4E,YAAc5E,EAAK4E,YAAYC,KAAjB5E,OAAA6E,EAAA,EAAA7E,QAAA6E,EAAA,EAAA7E,CAAAD,KAJFA,2HAUL,IAAAa,EAAAV,KACRY,EAAU,CACZgE,OAAO,OACP/D,IAAK,yEACLC,QAAS,CACLC,aAAc,kBACdC,KAAOhB,KAAKtB,MAAM8B,SAASS,uBAAuBC,YAAYC,UAElE0D,KAAM,CACJlF,KAAKK,KAAKI,MAAMT,KAChBmF,WAAW9E,KAAKI,MAAMoE,QAExBpD,MAAM,GAER7C,EAAGqC,GACFS,KAAK,SAAAhB,GACJK,EAAKC,SAAS,CAACN,KAAKA,IACpB1B,QAAQC,IAAIyB,KACXiB,MAAM,SAAAC,GACP5C,QAAQC,IAAI2C,wCAId,IAAIiD,EAASxE,KAAKI,MAAMoE,OACxBA,EAAOO,KAAK,IACZ/E,KAAKW,SAAS,CAAC6D,OAAOA,wCAEZQ,GACVhF,KAAKI,MAAMoE,OAAOS,OAAOD,EAAE,GAC3BhF,KAAKW,SAAS,CAAC6D,OAAOxE,KAAKI,MAAMoE,6CAEvBQ,EAAE/C,GACZjC,KAAKI,MAAMoE,OAAOQ,GAAK/C,EAAEiD,OAAOC,MAChCnF,KAAKW,SAAS,CAAC6D,OAAOxE,KAAKI,MAAMoE,4CAExBvC,GACTjC,KAAKW,SAAS,CAAChB,KAAKsC,EAAEiD,OAAOC,yCAGvB,IAAAC,EAAApF,KACFqF,EAAerF,KAAKI,MAAMoE,OAAOvF,IAAI,SAACqG,EAAEN,GAC1C,OAAO7F,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CAAUE,IAAK0F,EAAGQ,SAAO,GAC9BrG,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,CACEG,GAAE,QAAAG,OAAUsF,GACZU,MAAK,UAAAhG,OAAYsF,GACjBG,MAAK,GAAAzF,OAAK4F,GACVK,SAAU,SAAA1D,GAAC,OAAImD,EAAKX,YAAYO,EAAE/C,MAEpC9C,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CAAYyG,QAAS,SAAA5D,GAAC,OAAImD,EAAKU,YAAYd,IAAIe,aAAW,OAC5D5G,EAAAC,EAAAC,cAAC2G,EAAA5G,EAAD,UAMF,OAAOD,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,CAAWsG,MAAM,iBAAiBC,SAAU,SAAA1D,GAAC,OAAImD,EAAKa,WAAWhE,IAAIkD,MAAOnF,KAAKI,MAAMT,OACxFK,KAAKI,MAAMC,MAAQlB,EAAAC,EAAAC,cAAA,iBACpBF,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAD,CAAM+G,UAAU,OAChBhH,EAAAC,EAAAC,cAAC+G,EAAAhH,EAAD,MACCiG,GAEDlG,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CAAYyG,QAAS,SAAA5D,GAAC,OAAImD,EAAKiB,YAAYN,aAAW,MAAMO,MAAM,WAClEnH,EAAAC,EAAAC,cAACkH,EAAAnH,EAAD,OAEAD,EAAAC,EAAAC,cAACmH,EAAApH,EAAD,CAAQyG,QAAS,SAAA5D,GAAC,OAAImD,EAAKqB,eAAeH,MAAM,WAAhD,2BA9EsB7E,IAAMC,WCtB9BnD,EAAKC,EAAQ,KAkDJkI,cA7CX,SAAAA,EAAYhI,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0G,IACjB7G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4G,GAAAvG,KAAAH,KAAMtB,KACD0B,MAAQ,CAACC,UAAKC,EAAUC,eAAc,GAF1BV,mFAOdG,KAAKI,MAAMG,eAAeP,KAAKS,0DAG/BT,KAAKI,MAAMG,eAAeP,KAAKS,kDAEvB,IAAAC,EAAAV,KACXA,KAAKW,SAAS,CAACJ,eAAc,IAC7B5B,QAAQC,IAAI,eAEZ,IAAIgC,EAAU,CACZC,IAAG,gEAAAnB,OAAkEM,KAAKtB,MAAMsF,MAAMC,OAAO1E,IAC7FuB,QAAS,CACLC,aAAc,mBAElBK,MAAM,GAER7C,EAAGqC,GACFS,KAAK,SAAAhB,GACJK,EAAKC,SAAS,CAACN,KAAKA,IACpB1B,QAAQC,IAAI,aACX0C,MAAM,SAAAC,GACP5C,QAAQC,IAAI2C,sCAQd,OAAOpC,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,qBAAaW,KAAKtB,MAAMsF,MAAMC,OAAO1E,IACrCJ,EAAAC,EAAAC,cAAA,WACCW,KAAKI,MAAMC,MAAQlB,EAAAC,EAAAC,cAAA,+BAxCLoC,IAAMC,WCM7BiF,IAAQC,UAAU,CAChBC,KAAM,CAEFC,OAAQ,YAERC,WAAY,sBAEZC,oBAAqB,6BAErBC,uBAAwB,uBAIxBC,mLAEF,OAAO/H,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,KACLhI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+H,GAAD,MAEAjI,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIpB,UAAWqB,IACjCrI,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAK,aAAapB,UAAWsB,IACpCtI,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAK,gBAAgBpB,UAAWuB,IACvCvI,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAK,QAAQpB,UAAWwB,aATrBlG,IAAMC,WAelB8F,cACJ,SAAAA,EAAY9I,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwH,IACjB3H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0H,GAAArH,KAAAH,KAAMtB,KACD0B,MAAQ,CAACwH,KAAK,IAFF/H,wEAMX,IAAAa,EAAAV,KACN,OAAOb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kBACZF,EAAAC,EAAAC,cAACoG,EAAArG,EAAD,CAAWsG,MAAM,iBAAiBC,SAAU,SAAA1D,GAAC,OAAIvB,EAAKC,SAAS,CAACiH,KAAK3F,EAAEiD,OAAOC,SAASA,MAAOnF,KAAKI,MAAMwH,OACzGzI,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACmH,EAAApH,EAAD,CAAQ+G,UAAW3G,IAAMC,GAAE,SAAAC,OAAWM,KAAKI,MAAMwH,OAAjD,iBAVUnG,IAAMC,WAiBnBgG,EAAkB,SAAChJ,GACvB,OAAOS,EAAAC,EAAAC,cAACwI,EAAA,cAAD,KACL1I,EAAAC,EAAAC,cAACyI,EAAoBpJ,KAInBqJ,EAAgB,SAACrJ,GACrB,OAAOS,EAAAC,EAAAC,cAACwI,EAAA,cAAD,KACL1I,EAAAC,EAAAC,cAAC2I,EAAkBtJ,KAIjBuJ,EAAc,SAACvJ,GACnB,OAAOS,EAAAC,EAAAC,cAACwI,EAAA,cAAD,KACL1I,EAAAC,EAAAC,cAAC6I,EAAgBxJ,KAKfiJ,EAAU,SAACjJ,GACf,OAAOS,EAAAC,EAAAC,cAAA,WAELF,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAI,GAAA7H,OAAKhB,EAAMsF,MAAMuD,KAAjB,QAA6BY,OAAS,SAACC,GAAD,OAAOjJ,EAAAC,EAAAC,cAACgJ,EAAaD,MACtEjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CACEC,OAAK,EACLC,KAAM7I,EAAMsF,MAAMuD,KAClBY,OAAQ,kBAAMhJ,EAAAC,EAAAC,cAACiJ,EAAkB5J,QAIjC+I,EAAe,SAAC/I,GACpB,OAAOS,EAAAC,EAAAC,cAAA,WAELF,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CAAOE,KAAI,GAAA7H,OAAKhB,EAAMsF,MAAMuD,KAAjB,QAA6BY,OAAS,SAACC,GAAD,OAAOjJ,EAAAC,EAAAC,cAACkJ,EAAgBH,MACzEjJ,EAAAC,EAAAC,cAACgI,EAAA,EAAD,CACEC,OAAK,EACLC,KAAM7I,EAAMsF,MAAMuD,KAClBY,OAAQ,kBAAMhJ,EAAAC,EAAAC,cAACiJ,EAAkB5J,QAejC8J,IATc/G,IAAMC,UASX,kBACbvC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,cAAT,mBAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAG,iBAAT,2BAKSyH,KC/GKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5E,MACvB,2DCZN6E,IAASV,OAAOhJ,EAAAC,EAAAC,cAACyJ,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9H,KAAK,SAAA+H,GACjCA,EAAaC","file":"static/js/main.c2031ad6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nconst rp = require('request-promise-native')\n\nconst ElectList = (props) => {\n    console.log(JSON.stringify(props));\n    const listItems = props.elections.map((elem) =>\n        <li key={elem.id}><Link to={`elections/${elem.id}`}>{elem.name}</Link></li>\n    );\n    return <ul>\n       {listItems}\n    </ul>\n}\n\nclass ElectionsPage extends React.Component{ \n    constructor(props) {\n      super(props)\n      this.state = {data:undefined,needFetchData:true}\n      //if(this.props.authData) this.updateData()\n      \n    }\n  \n    componentDidUpdate() {\n      if(this.props.authData && this.state.needFetchData) this.updateData()\n    }\n    updateData() {\n      this.setState({needFetchData:false})\n      console.log(\"GettingData\")\n      //var token = this.props.authData.getSession()\n      var options = {\n        uri: 'https://pvyeeoatp7.execute-api.us-east-1.amazonaws.com/Alpha/elections',\n        headers: {\n            'User-Agent': 'Request-Promise',\n            'auth':this.props.authData.getSignInUserSession().accessToken.jwtToken\n        },\n        json: true // Automatically parses the JSON string in the response\n      };\n      rp(options)\n      .then(data => {\n        this.setState({data:data})\n        console.log(\"GotData\")\n      }).catch(err =>{\n        console.log(err)\n      })\n      \n      \n    }\n    render(){\n  \n      \n      return <div>\n        <h2>Elections</h2>\n        <div>\n        {this.state.data && <div> <ElectList {...this.state.data} /> </div>}</div>\n        </div>;\n    }\n  }\n\n\nexport default ElectionsPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { ResponsiveBar } from '@nivo/bar'\nconst rp = require('request-promise-native')\n\nconst pStyle = {}\nconst Plot = (props) => {\n    let charLen = Math.max(...props.data.map(e => e.name.length))\n    return <div style={{height:props.data.length * 100}}><ResponsiveBar\n        data={props.data}\n        keys={[\"votes\"]}\n        indexBy=\"name\"\n        layout=\"horizontal\"\n        margin={{\n            \"top\": 50,\n            \"right\": 130,\n            \"bottom\": 50,\n            \"left\": 10*charLen\n        }}\n        padding={0.2}\n        colors=\"dark2\"\n        colorBy=\"id\"\n        borderColor=\"inherit:darker(1.6)\"\n        axisBottom={{\n            \"tickSize\": 5,\n            \"tickPadding\": 5,\n            \"tickRotation\": 0,\n            \"legend\": \"Votes\",\n            \"legendPosition\": \"middle\",\n            \"legendOffset\": 32\n        }}\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor=\"inherit:darker(1.6)\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n    /></div>\n}\n\nclass ResultsPage extends React.Component{ \n    constructor(props) {\n      super(props)\n      this.state = {data:undefined,needFetchData:true}\n      if(this.props.authData) this.updateData()\n      console.log(JSON.stringify(props))\n      \n    }\n  \n    componentDidUpdate() {\n      if(this.props.authData && this.state.needFetchData) this.updateData()\n    }\n    updateData() {\n      this.setState({needFetchData:false})\n      console.log(\"GettingData\")\n      //var token = this.props.authData.getSession()\n      var options = {\n        uri: `https://pvyeeoatp7.execute-api.us-east-1.amazonaws.com/Alpha/${this.props.match.params.id}/results`,\n        headers: {\n            'User-Agent': 'Request-Promise',\n            'auth':this.props.authData.getSignInUserSession().accessToken.jwtToken\n        },\n        json: true // Automatically parses the JSON string in the response\n      };\n      rp(options)\n      .then(data => {\n        data.results.sort((a,b) => a.votes - b.votes)\n        this.setState({data:data})\n        console.log(\"GotData\")\n      }).catch(err =>{\n        console.log(err)\n      })\n      \n      \n    }\n    render(){\n  \n      \n      return <div>\n        <h2>Election</h2>\n        <h3>Requested Param: {this.props.match.params.id}</h3>\n        <div>\n        {this.state.data && <div>{JSON.stringify(this.state.data)}<Plot data={this.state.data.results} keys={this.state.data.results.map(e => e.name)}/></div>}</div>\n        </div>;\n    }\n  }\n\n\nexport default ResultsPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst rp = require('request-promise-native')\n\nconst ChoiceList = (props) => {\n    console.log(JSON.stringify(props));\n    const listItems = props.elections.map((elem) =>\n        <li key={elem.id}><Link to={`elections/${elem.id}`}>{elem.name}</Link></li>\n    );\n    return <ul>\n       {listItems}\n    </ul>\n}\n\nclass AddElectionPage extends React.Component{ \n    constructor(props) {\n      super(props)\n      this.state = {name:\"\",fields:[\"derp\"]}\n      //if(this.props.authData) this.updateData()\n      this.updateField = this.updateField.bind(this)\n    }\n  \n    componentDidUpdate() {\n      //if(this.props.authData && this.state.needFetchData) this.updateData()\n    }\n    addElection() {\n      var options = {\n        method:'POST',\n        uri: 'https://pvyeeoatp7.execute-api.us-east-1.amazonaws.com/Alpha/elections',\n        headers: {\n            'User-Agent': 'Request-Promise',\n            'auth':this.props.authData.getSignInUserSession().accessToken.jwtToken\n        },\n        body: {\n          name:this.state.name,\n          candidates:this.state.fields\n        },\n        json: true // Automatically parses the JSON string in the response\n      };\n      rp(options)\n      .then(data => {\n        this.setState({data:data})\n        console.log(data)\n      }).catch(err =>{\n        console.log(err)\n      })\n    }\n    addField() {\n      let fields = this.state.fields\n      fields.push(\"\")\n      this.setState({fields:fields})\n    }\n    removeField(i) {\n      this.state.fields.splice(i,1)\n      this.setState({fields:this.state.fields})\n    }\n    updateField(i,e) {\n      this.state.fields[i] = e.target.value\n      this.setState({fields:this.state.fields})\n    }\n    changeName(e) {\n      this.setState({name:e.target.value})\n    }\n    \n    render(){\n      var fieldsComps  = this.state.fields.map((f,i) => {\n        return <ListItem key={i} divider>\n          <TextField \n            id={`input${i}`}\n            label={`Option ${i}`} \n            value={`${f}`}\n            onChange={e => this.updateField(i,e)}\n              />\n          <IconButton onClick={e => this.removeField(i)} aria-label=\"Add\" >\n        <DeleteIcon />\n        </IconButton>\n        \n      </ListItem>\n      })\n      \n      return <div>\n        <h2>Create New Election</h2>\n        <div>\n          <TextField label=\"Election Name:\" onChange={e => this.changeName(e)} value={this.state.name}/>\n        {this.state.data && <div> </div>}</div>\n        <List component=\"nav\">\n        <Divider />\n        {fieldsComps}\n        </List>\n        <IconButton onClick={e => this.addField()} aria-label=\"Add\" color=\"primary\">\n        <AddIcon />\n        </IconButton>\n        <Button onClick={e => this.addElection()} color=\"primary\" >Create Election</Button>\n        </div>;\n    }\n  }\n\n\nexport default AddElectionPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nconst rp = require('request-promise-native')\n\n\n\nclass VotePage extends React.Component{ \n    constructor(props) {\n      super(props)\n      this.state = {data:undefined,needFetchData:true}\n      //this.updateData()\n      \n    }\n    componentDidMount() {\n      if(this.state.needFetchData) this.updateData()\n    }\n    componentDidUpdate() {\n      if(this.state.needFetchData) this.updateData()\n    }\n    updateData() {\n      this.setState({needFetchData:false})\n      console.log(\"GettingData\")\n      //var token = this.props.authData.getSession()\n      var options = {\n        uri: `https://pvyeeoatp7.execute-api.us-east-1.amazonaws.com/Alpha/${this.props.match.params.id}`,\n        headers: {\n            'User-Agent': 'Request-Promise'\n        },\n        json: true // Automatically parses the JSON string in the response\n      };\n      rp(options)\n      .then(data => {\n        this.setState({data:data})\n        console.log(\"GotData\")\n      }).catch(err =>{\n        console.log(err)\n      })\n      \n      \n    }\n    render(){\n  \n      \n      return <div>\n        <h2>Vote on {this.props.match.params.id}</h2>\n        <div>\n        {this.state.data && <div> Hello </div>}</div>\n        </div>;\n    }\n  }\n\n\nexport default VotePage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Amplify from 'aws-amplify';\nimport { withAuthenticator, Authenticator } from 'aws-amplify-react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport ElectionsPage from './ElectionsPage'\nimport ResultsPage from './ResultsPage'\nimport AddElectionPage from './AddElectionPage'\nimport VotePage from './VotePage'\n\nAmplify.configure({\n  Auth: {\n      // REQUIRED - Amazon Cognito Region\n      region: 'us-east-1', \n      // OPTIONAL - Amazon Cognito User Pool ID\n      userPoolId: 'us-east-1_fJtNPqIhN',\n      // OPTIONAL - Amazon Cognito Web Client ID\n      userPoolWebClientId: '7rrkppdo26u3r1b1dgfugq0vdf', \n      // Manually set the authentication flow type. Default is 'USER_SRP_AUTH'\n      authenticationFlowType: 'USER_SRP_AUTH'\n  }\n});\n\nclass App extends React.Component {\n  render() {\n    return <Router>\n      <div>\n        <Header />\n  \n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/elections\" component={ElectionsNav} />\n        <Route path=\"/add-election\" component={AddElectionAuth} />\n        <Route path=\"/vote\" component={VoteNav} />\n      </div>\n    </Router>\n  };\n} \n\nclass Home extends React.Component { \n  constructor(props) {\n    super(props);\n    this.state = {code:\"\"}\n\n  }\n  \n  render(){\n    return <div><h2>Home</h2>\n    <TextField label=\"Election Name:\" onChange={e => this.setState({code:e.target.value})} value={this.state.code}/>\n    <div><Button component={Link} to={`/vote/${this.state.code}`}>\n      Link\n    </Button></div>\n    </div>;\n  } \n}\n\nconst AddElectionAuth = (props) => {\n  return <Authenticator>\n    <AddElectionPage {...props}/>\n  </Authenticator>;\n}\n\nconst ElectionsAuth = (props) => {\n  return <Authenticator>\n    <ElectionsPage {...props}/>\n  </Authenticator>;\n}\n\nconst ResultsAuth = (props) => {\n  return <Authenticator>\n    <ResultsPage {...props}/>\n  </Authenticator>;\n}\n\n\nconst VoteNav = (props) => {\n  return <div>\n    \n    <Route path={`${props.match.path}/:id`} render= {(p) => <VotePage {...p}/>} />\n    <Route\n      exact\n      path={props.match.path}\n      render={() => <ElectionsAuth {...props}/>}\n    />\n    </div>;\n}\nconst ElectionsNav = (props) => {\n  return <div>\n    \n    <Route path={`${props.match.path}/:id`} render= {(p) => <ResultsAuth {...p}/>} />\n    <Route\n      exact\n      path={props.match.path}\n      render={() => <ElectionsAuth {...props}/>}\n    />\n    </div>;\n}\n\n\nclass Topic extends React.Component{ \n  constructor(props) {\n    super(props);\n    this.state = {msg:'hello',props:props}\n    console.log(JSON.stringify(props))\n  }\n  render() {return <h3>Requested Param: {this.props.match.params.id}</h3>;}\n};\n\nconst Header = () => (\n  <ul>\n    <li>\n      <Link to=\"/\">Home</Link>\n    </li>\n    <li>\n      <Link to=\"/elections\">Your Elections</Link>\n    </li>\n    <li>\n      <Link to=\"/add-election\">Create New Election</Link>\n    </li>\n  </ul>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}